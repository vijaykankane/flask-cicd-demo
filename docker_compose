# Docker Compose configuration for Flask CI/CD Demo Application
# This file provides multi-environment setup for development, testing, and production

version: '3.8'

# Networks for service communication
networks:
  flask-network:
    driver: bridge
    name: flask-cicd-network

# Volumes for data persistence
volumes:
  flask-logs:
    name: flask-cicd-logs

services:
  # Main Flask Application
  flask-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        BUILD_VERSION: ${BUILD_VERSION:-1.0.0}
        VCS_REF: ${GIT_COMMIT:-unknown}
    image: flask-cicd-demo:${TAG:-latest}
    container_name: flask-app-${ENV:-dev}
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "${PORT:-5000}:5000"
    
    # Environment variables
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - FLASK_DEBUG=${FLASK_DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - BUILD_NUMBER=${BUILD_NUMBER:-1}
      - GIT_COMMIT=${GIT_COMMIT:-unknown}
      - PORT=5000
      - HOST=0.0.0.0
      
      # Gunicorn configuration
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-30}
      
      # Additional configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Volume mounts
    volumes:
      - flask-logs:/app/logs
      - ./app.py:/app/app.py:ro  # Development: mount source for hot reload
    
    # Network
    networks:
      - flask-network
    
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: false  # Set to true for maximum security (requires volume mounts for temp dirs)
    user: "1000:1000"  # Non-root user
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Labels for container management
    labels:
      - "com.docker.compose.service=flask-app"
      - "com.example.environment=${ENV:-development}"
      - "com.example.version=${BUILD_VERSION:-1.0.0}"

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: redis-${ENV:-dev}
    restart: unless-stopped
    
    # Port mapping (commented out for security - internal only)
    # ports:
    #   - "6379:6379"
    
    # Configuration
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-devpassword}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    
    # Environment variables
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devpassword}
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    
    # Volume for persistence
    volumes:
      - redis-data:/data
    
    # Network
    networks:
      - flask-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    user: "999:999"  # Redis user

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: nginx-${ENV:-dev}
    restart: unless-stopped
    profiles:
      - production  # Only start in production profile
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - flask-logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      flask-app:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    # Network
    networks:
      - flask-network
    
    # Security
    security_opt:
      - no-new-privileges:true

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${ENV:-dev}
    restart: unless-stopped
    profiles:
      - monitoring  # Only start with monitoring profile
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Configuration
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Network
    networks:
      - flask-network

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${ENV:-dev}
    restart: unless-stopped
    profiles:
      - monitoring  # Only start with monitoring profile
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Network
    networks:
      - flask-network

# Named volumes for data persistence
volumes:
  redis-data:
    name: flask-cicd-redis-data
  prometheus-data:
    name: flask-cicd-prometheus-data
  grafana-data:
    name: flask-cicd-grafana-data

# Configuration examples for different environments:

# Development:
# docker-compose up
# OR
# ENV=dev docker-compose up

# Testing:
# ENV=test FLASK_ENV=testing docker-compose up --profile testing

# Production:
# ENV=prod FLASK_ENV=production docker-compose --profile production up -d

# With monitoring:
# docker-compose --profile production --profile monitoring up -d

# Environment variables can be set in .env file:
# PORT=5000
# FLASK_ENV=production
# SECRET_KEY=your-secret-key
# REDIS_PASSWORD=secure-password
# BUILD_VERSION=1.0.0
# GIT_COMMIT=abc123

# Useful commands:
# docker-compose ps                    # Show running services
# docker-compose logs -f flask-app    # Follow app logs
# docker-compose exec flask-app bash  # Connect to app container
# docker-compose down -v             # Stop and remove volumes
# docker-compose up --scale flask-app=3  # Scale app service